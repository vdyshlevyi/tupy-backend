[project]
name = "tupy"
version = "0.1.0"
description = ""
authors = [
    {name = "vdyshlevyi", email = "vdyshlevyi@gmail.com"},
]
readme = "README.md"
requires-python = ">=3.12"

[tool.poetry]
package-mode = false


[tool.poetry.dependencies]
python = "^3.12"

uvicorn = "^0.34.3"
fastapi = "^0.115.12"
pydantic-settings = "^2.10.1"
sqlalchemy = "^2.0.41"
alembic = "^1.16.4"
asyncpg = "^0.30.0"
dependency-injector = "^4.48.1"
greenlet = "^3.2.3"
pyjwt = "^2.10.1"
passlib = "^1.7.4"
pydantic = {extras = ["email"], version = "^2.11.7"}
factory-boy = "^3.3.3"
bcrypt = "^4.3.0"
alembic-postgresql-enum = "^1.8.0"
geoalchemy2 = "^0.18.0"


[tool.poetry.group.dev.dependencies]
mypy = "^1.17.0"
ruff = "^0.12.5"
types-passlib = "^1.7.7.20250602"
pytest = "^8.4.1"
testcontainers = "^4.12.0"
pytest-cov = "^6.2.1"
pytest-xdist = "^3.8.0"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["ALL"]
extend-select = ["I"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
ignore = [
    "ANN002",  # Missing type annotation for `*args`
    "ANN003",  # Missing type annotation for `**kwargs`
    "ARG002",  # Unused method argument: `args`
    "ARG004",  # Unused static method argument: `kwargs`
    "B008",    # Do not perform function call `Depends` in argument defaults; instead, perform the call ...
    "COM812",
    "COM819",  # prohibited-trailing-comma
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D106",    # Missing docstring in public nested class
    "D107",    # Missing docstring in `__init__`
    "D203",    # 1 blank line required before class docstring
    "D205",    # 1 blank line required between summary line and description
    "D211",    # one-blank-line-before-class
    "D212",    # multi-line-summary-second-line
    "D400",    # First line should end with a period
    "D401",    # First line should be in imperative mood
    "D415",    # First line should end with a period
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "ERA001",  # Found commented-out code
    "FA100",   # Add `from __future__ import annotations` to simplify `typing.Union`
    "FA102",   # Add `from __future__ import annotations`
    "FAST002", # Identifies FastAPI routes with deprecated uses of Depends or similar.
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "FIX002",  # Line contains TO_DO, consider resolving the issue
    "G004",    # Logging statement uses f-string
    "ISC001",
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PT003",   # scope="function" in fixtures is default
    "SLF001",  # Private member accessed: `_engine`
    "TD003",   # Missing issue link on the line following this TODO
    # TODO -> try to fix next errors
    "B904",
    "ANN201",
]

[tool.ruff.lint.per-file-ignores]
"*test*" = [
    "ANN001",  # Missing type annotation for function argument `<fixture-name>`
    "ARG001",  # Unused function argument
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PLR2004", # Magic value used in comparison
    "PT019",   # Fixture `<name>` without value is injected as parameter, use `@pytest.mark.usefixtures` instead
    "S101",    # Use of `assert` detected
    "S105",    # Possible hardcoded password assigned to
    "S106",    # Possible hardcoded password assigned to argument
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests/unit", "tests/integration"]
# Add additional options if you want to configure pytest further
addopts = "--disable-warnings --maxfail=5"
# Optional: Configure pytest to use custom markers or plugins
markers = [
    "unit: Unit tests",
    "integration: Integration tests"
]

[tool.mypy]
exclude = [
    "ignore/me.py",
]
